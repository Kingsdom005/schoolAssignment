#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
#include<graphics.h>
#include<mmsystem.h>
#pragma comment(lib,"winmm.lib")

//贪吃蛇
//知识点：结构体，循环，数组，函数，easyx
#define SNAKE_NUM 500  //蛇的最大节数
enum DIR
{
	UP,
	DOWN,
	LEFT,
	RIGHT
};
struct Snake
{
	int size; //蛇的节数
	int dir; //蛇的方向
	int speed; //蛇的速度
	POINT coor[SNAKE_NUM]; //坐标
}snake;

struct Food
{
	int x;
	int y;
	int r;		 //食物大小
	bool flag;	 //是否被吃	
	DWORD color; //食物颜色
}food;
//图形,数据初始化
void GameInit()
{
	//播放背景音乐
	mciSendString("open C:\\Users\\liyanqiAB123\\Music\\666.mp3 alias BGM", 0, 0, 0);
	mciSendString("play BGM repeat", 0, 0, 0);

	//init 初始化 graph 图形界面
	initgraph(640, 480/*,SHOWCONSOLE*/);

	snake.size = 50; //初始3节
	snake.speed = 10;
	snake.dir = RIGHT;
	for (int i =  0;i < snake.size ; i++)
	{
		snake.coor[i].x = 40 - 10 * i;
		snake.coor[i].y = 10;
	}
	//初始化食物
	srand(time(NULL));
	//srand(GetTickCount()); //返回系统开机到现在的毫秒数
	food.x = rand() % 640;
	food.y = rand() % 480;
	food.color = RGB(rand() % 256, rand() % 256, rand() % 256);
	food.r = rand() % 10 + 5;
	food.flag = true;

}
void Gamedraw()
{
	//双缓冲绘图（防止闪屏）
	BeginBatchDraw();
	//设置背景颜色 
	setbkcolor(RGB(85, 102, 203));
	cleardevice();
	//绘制蛇
	setfillcolor(RED);
	for (int i = 0; i < snake.size; i++)
	{
		solidcircle(snake.coor[i].x, snake.coor[i].y, 5);
	}
	//绘制食物
	if (food.flag)
	{
		solidcircle(food.x, food.y, food.r);
	}

	EndBatchDraw();
}
//移动蛇
void snakeMove()
{
	for (int i = snake.size - 1; i > 0 ; i--)
	{
		//snake.coor[i].x = snake.coor[i - 1].x;
		//snake.coor[i].y = snake.coor[i - 1].y;
		snake.coor[i] = snake.coor[i - 1];
	}
	switch (snake.dir)
	{
		//高480宽640
	case UP:
		snake.coor[0].y -= snake.speed; //距离与速度匹配
		if (snake.coor[0].y + 10 <= 0) //判断出上界
		{
			snake.coor[0].y = 480; //穿墙
		}
		break;
	case DOWN:
		snake.coor[0].y += snake.speed;
		if (snake.coor[0].y - 10 >= 480) //判断出上界
		{
			snake.coor[0].y = 0; //穿墙
		}
		break;
	case RIGHT:
		snake.coor[0].x += snake.speed;
		if (snake.coor[0].x - 10 >= 640) //判断出上界
		{
			snake.coor[0].x = 0; //穿墙
		}
		break;
	case LEFT:
		snake.coor[0].x -= snake.speed;
		if (snake.coor[0].x + 10 <= 0) //判断出上界
		{
			snake.coor[0].x = 640; //穿墙
		}
		break;
	}
}
//通过按键改变蛇的方向
void keyControl()
{
	//判断有无按键,有按键则返回真
	if (_kbhit())
	{
		//72 80 75 77 上下左右键值
		switch (_getch())
		{
		case 'W':
		case 'w':
		case 72:
			if(snake.dir != DOWN) snake.dir = UP;
			break;
		case 's':
		case 'S':
		case 80:
			if(snake.dir != UP) snake.dir = DOWN;
			break;
		case 'a':
		case 'A':
		case 75:
			if(snake.dir != RIGHT) snake.dir = LEFT;
			break;
		case 'D':
		case 'd':
		case 77:
			if(snake.dir != LEFT) snake.dir = RIGHT;
			break;
		case ' ':  //游戏暂停
			while (1)
			{
				if (_getch() == ' ') return;
			}
			break;
		}
	}
	
}
void EatFood()
{
	if (food.flag&&(snake.coor[0].x >= food.x - food.r && snake.coor[0].x <= food.x + food.r) && (snake.coor[0].y >= food.y-food.r && snake.coor[0].y <= food.y + food.r))
	{
		food.flag = false;
		snake.size++;
	}
	//食物消失刷新
	if (!food.flag)
	{
		//初始化食物
		srand(time(NULL));
		//srand(GetTickCount()); //返回系统开机到现在的毫秒数
		food.x = rand() % 640;
		food.y = rand() % 480;
		food.color = RGB(rand() % 256, rand() % 256, rand() % 256);
		food.r = rand() % 10 + 5;
		food.flag = true;
	}
}
int gameOver()
{
	int flag = 0;
	for (int i = 1; i < snake.size; i++)
	{
		if (snake.coor[0].x == snake.coor[i].x && snake.coor[0].y == snake.coor[i].y)
		{
			flag = 1;
		}
	}
	if (flag == 1)
	{
		return 1;
	}
	return 0;

}
int main()
{
	GameInit();
	Gamedraw();
	
	while (1)
	{
		Gamedraw();
		snakeMove();
		keyControl();
		EatFood();
		Sleep(40);
		if (gameOver() == 1)
		{
			return 0;
		}
	}
	return 0;
}
